{"version":3,"sources":["logo.svg","World.tsx","ProvStats.tsx","NationalStats.tsx","ProvGraph.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["World","this","setState","state","fetch","then","response","json","result","world","catch","e","console","log","date","getTime","callback","data","sortedData","slice","sort","a","b","Date","LineChart","width","height","margin","top","right","left","bottom","XAxis","dataKey","Label","value","offset","position","YAxis","type","domain","Tooltip","Line","stroke","Component","ProvStats","nextProps","latitude","longitude","getLocationFromPosition","territoryStats","url","toPrecision","tStats","renderProvJSON","Name","ActiveCases","CaseTotal","Hospitalized","ICU","Deaths","Vaccinated","NationalStats","canadaNationalStats","renderNatJSON","CasesNew","CasesTotal","DailyRecovered","Recovered","DailyDeaths","TotalDeaths","DailyVaccinated","TotalVaccinated","ProvGraph","getCovidStatsByLocation","prov","location","destinationObj","features","Object","assign","attributes","dataKeys","keys","dropDownMenuItems","i","length","push","Dropdown","Item","eventKey","xTickFormat","SummaryDate","provName","Territory","undefined","d3Extent","d","d3ScaleTime","range","tickFormat","kbDomain","d3Max","setsize","getsize","yTickFormat","d3ScaleLinear","d3Format","toString","DropdownButton","alignRight","title","selectedData","id","onSelect","tickFormatter","label","App","lat","lon","navigator","geolocation","getCurrentPosition","coords","className","rel","href","integrity","crossOrigin","src","logo","alt","Container","Row","Col","render","document","getElementById","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.c860ab25.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Component } from 'react';\nimport { LineChart, Line, XAxis, YAxis, Label, Tooltip } from 'recharts';\n\nexport default class World extends Component<{}, {world: any[]}> {\n    componentDidMount() {\n        this.setState({...this.state});\n        try {\n            fetch('/api/v1/world')\n                .then(response => response.json())\n                .then(result => {\n                    this.setState({world: result})\n                })\n                .catch(e => {\n                    console.log(e)\n                    this.setState({...this.state})\n                });\n        }\n        catch (e) {\n            console.log(e);\n        }\n    }\n\n    private getTime(date?: Date) {\n        return date != null ? date.getTime() : 0;\n    }\n    \n    componentWillUnmount() {\n        // fix Warning: Can't perform a React state update on an unmounted component\n        this.setState = (state,callback)=>{\n            return;\n        };\n    }\n    \n\n    render() {\n        const data = this?.state?.world;\n        const sortedData = data?.slice()?.sort((a: any, b: any) => {\n            return this.getTime(new Date(a.Date)) - this.getTime(new Date(b.Date));\n        });\n        const renderLineChart = (\n            <LineChart width={525} height={300} data={sortedData} margin={{ top: 15, right: 10, left: 20, bottom: 25 }}>\n                <XAxis dataKey=\"Date\">\n                    <Label value=\"Date\" offset={0} position=\"insideBottom\" />\n                </XAxis>\n                <YAxis width={150} type=\"number\" domain={['dataMin - 10000', 'dataMax + 10000']}/>\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"TotalDeaths\" stroke=\"#82ca9d\" />\n            </LineChart>\n        );\n        return renderLineChart;\n    }\n}","import { Component } from 'react';\n// import { NoSubstitutionTemplateLiteral } from 'typescript';\nimport TerritoryStats from './Models/TerritoryStats';\n\nexport default class ProvStats extends Component<{longitude: any, latitude: any}, {territoryStats: TerritoryStats}> {\n    async componentDidMount(): Promise<void> {\n        this.setState({...this.state})\n    }\n    async componentDidUpdate(nextProps: {latitude: any, longitude: any}): Promise<void> {\n        if (nextProps.latitude !== 0 && nextProps.longitude !== 0) {\n            this.setState({territoryStats: await this.getLocationFromPosition(nextProps.latitude, nextProps.longitude)});\n        }\n    }\n    componentWillUnmount() {\n        // fix Warning: Can't perform a React state update on an unmounted component\n        this.setState = (state,callback)=>{\n            return;\n        };\n    }\n\n    async getLocationFromPosition(latitude: number, longitude: number): Promise<any> {\n\n        try {\n            const url = `/api/v1/location?longitude=${longitude.toPrecision(5)}&latitude=${latitude.toPrecision(5)}&component=provstats`;\n            let result: any = await (await fetch(url)).json();//.json();\n            const tStats: TerritoryStats = result;\n            return tStats;\n        }\n        catch (e) {\n            console.log(e);\n        }\n    }\n    \n    render() {\n        let renderProvJSON;\n        try\n        {\n        renderProvJSON = (\n        <div>\n            <h6>Province/Territory: {this?.state?.territoryStats.Name}</h6>\n            <h6>Active Cases: {this?.state?.territoryStats.ActiveCases}</h6>\n            <h6>Total Cases: {this?.state?.territoryStats.CaseTotal}</h6>\n            <h6>Hospitalized: {this?.state?.territoryStats.Hospitalized}</h6>\n            <h6>ICU: {this?.state?.territoryStats.ICU}</h6>\n            <h6>Deaths: {this?.state?.territoryStats.Deaths}</h6>\n            <h6>Vaccinated: {this?.state?.territoryStats.Vaccinated}</h6>\n        </div>);\n        }\n        catch(e: any){\n            console.log(e);\n            return null;\n        }\n        return renderProvJSON;\n    }\n}","import { Component } from 'react';\nimport CanadaNationalStats from './Models/CanadaNationalStats';\n\nexport default class NationalStats extends Component<{longitude: any, latitude: any}, {canadaNationalStats: CanadaNationalStats}> {\n    async componentDidMount(): Promise<void> {\n    }\n    async componentWillReceiveProps(nextProps: {latitude: any, longitude: any}): Promise<void> {\n        if (nextProps.latitude !== 0 && nextProps.longitude !== 0) {\n            this.setState({canadaNationalStats: await this.getLocationFromPosition(nextProps.latitude, nextProps.longitude)});\n        }\n    }\n    componentWillUnmount() {\n        // fix Warning: Can't perform a React state update on an unmounted component\n        this.setState = (state,callback)=>{\n            return;\n        };\n    }\n\n    async getLocationFromPosition(latitude: number, longitude: number): Promise<any> {\n\n        try {\n            const url = `/api/v1/location?longitude=${longitude.toPrecision(5)}&latitude=${latitude.toPrecision(5)}&component=nationalstats`;\n            let result: CanadaNationalStats = await (await fetch(url)).json();//.json();\n            // const tStats: CanadaNationalStats = result;\n            return result;\n        }\n        catch (e) {\n            console.log(e);\n        }\n    }\n    \n    render() {\n        let renderNatJSON;\n        try\n        {\n        renderNatJSON = (\n        <div>\n            <h6>Canada National Stats:</h6>\n            <h6>New Cases: {this?.state?.canadaNationalStats.CasesNew}</h6>\n            <h6>Total Cases: {this?.state?.canadaNationalStats.CasesTotal}</h6>\n            <h6>Daily Recovered: {this?.state?.canadaNationalStats.DailyRecovered}</h6>\n            <h6>Total Recovered: {this?.state?.canadaNationalStats.Recovered}</h6>\n            <h6>Daily Deaths: {this?.state?.canadaNationalStats.DailyDeaths}</h6>\n            <h6>Total Deaths: {this?.state?.canadaNationalStats.TotalDeaths}</h6>\n            <h6>Daily Vaccinated: {this?.state?.canadaNationalStats.DailyVaccinated}</h6>\n            <h6>Total Vaccinated: {this?.state?.canadaNationalStats.TotalVaccinated}</h6>\n        </div>);\n        }\n        catch(e: any){\n            console.log(e);\n            return null;\n        }\n        return renderNatJSON;\n    }\n}","import { Component } from 'react';\nimport Location from './Models/Location';\nimport {Dropdown, DropdownButton} from 'react-bootstrap';\nimport { LineChart, Line, XAxis, YAxis, Label, Tooltip } from 'recharts';\nimport { extent as d3Extent, max as d3Max } from 'd3-array';\nimport { scaleLinear as d3ScaleLinear, scaleTime as d3ScaleTime } from 'd3-scale';\nimport { format as d3Format } from 'd3-format';\n\nexport default class ProvGraph extends Component<{longitude: any, latitude: any}, {prov: any, location: Location, selectedData: string}> {\n    // state = {\n    //     prov: {features: null}, \n    //     location: {\n    //         City: \"\",     \n    //         Territory: \"\",\n    //         Country: \"\",\n    //         Longitude: 0,\n    //         Latitude: 0\n    //     }, \n    //     selectedData: \"\"\n    // };\n\n    async componentWillReceiveProps(nextProps: {latitude: any, longitude: any}): Promise<void> {\n        if (nextProps.latitude !== 0 && nextProps.longitude !== 0) {\n            this.setState({prov: await this.getCovidStatsByLocation(nextProps.latitude, nextProps.longitude)});\n            this.setState({location: await this.getLocationFromPosition(nextProps.latitude, nextProps.longitude)});\n        }\n    }\n\n    componentWillUnmount() {\n        this.setState = (state,callback)=>{\n            return;\n        };\n    }\n    \n    private getTime(date?: Date) {\n        return date != null ? date.getTime() : 0;\n    }\n\n    async getCovidStatsByLocation(latitude: number, longitude: number): Promise<any> {\n\n        try {\n            const url = `/api/v1/location?longitude=${longitude.toPrecision(5)}&latitude=${latitude.toPrecision(5)}&component=provgraph`;\n            let result: any = await fetch(url);//.json();\n            console.log(result);\n            return await result.json();\n        }\n        catch (e) {\n            console.log(e);\n        }\n    }\n    \n    async getLocationFromPosition(latitude: number, longitude: number): Promise<any> {\n\n        try {\n            const url = `/api/v1/location?longitude=${longitude.toPrecision(5)}&latitude=${latitude.toPrecision(5)}&component=locationdata`;\n            let result: any = await (await fetch(url)).json();//.json();\n            return result;\n        }\n        catch (e) {\n            console.log(e);\n        }\n    }\n\n    render() {\n        let destinationObj = [{}];\n        const data = this?.state?.prov?.features;\n        Object.assign(destinationObj, this?.state?.prov?.features[0].attributes);\n        const dataKeys = Object.keys(destinationObj);\n        let dropDownMenuItems: any[] = [];\n        for(var i = 0; i < dataKeys.length; i++) {\n            dropDownMenuItems.push(<Dropdown.Item eventKey={dataKeys[i]}>{dataKeys[i]}</Dropdown.Item>)\n        }\n        const sortedData = data?.slice()?.sort((a: any, b: any) => {\n            return this.getTime(new Date(a.attributes.SummaryDate)) - this.getTime(new Date(b.attributes.SummaryDate));\n        });\n        const provName = this?.state?.location?.Territory;\n        let handleSelect=(e: any)=>{\n            this.setState({selectedData: e});\n        }\n        \n        let domain: any\n        let xTickFormat: any;\n        if(data !== undefined) {\n            domain = d3Extent (data, (d: any)=>new Date(d.attributes.SummaryDate)); \n            const tScale = d3ScaleTime().domain(domain).range([0, 1]);\n            xTickFormat = tScale.tickFormat();\n        }\n\n        const kbDomain: any = [0, (d: any)=>d3Max([d.setsize,d.getsize])];\n            const kbScale = d3ScaleLinear().domain(kbDomain).range([0, 1]);\n            const yTickFormat = kbScale.tickFormat(5,d3Format(\".1f\").toString());\n\n        const renderLineChart = (\n            <div>\n                <h6>{provName}</h6>\n                <DropdownButton\n                alignRight\n                title={(((this?.state?.selectedData === undefined) ? 'Select a Data Set' : this?.state?.selectedData))}\n                id='drop-down-menu-align-right'\n                onSelect={handleSelect}>\n                    {dropDownMenuItems}\n                </DropdownButton>\n                <LineChart width={525} height={300} data={sortedData} margin={{ top: 15, right: 10, left: 20, bottom: 25 }}>\n                    <XAxis dataKey=\"attributes.SummaryDate\" tickFormatter= {xTickFormat}>\n                        <Label value=\"Date\" offset={0} position=\"insideBottom\" />\n                    </XAxis>\n                    <YAxis width={150} type=\"number\" label={this?.state?.selectedData} tickFormatter={yTickFormat}/>\n                    <Tooltip />\n                    <Line type=\"monotone\" dataKey={\"attributes.\" + this?.state?.selectedData} stroke=\"#82ca9d\" />\n                </LineChart>\n            </div>\n        );\n        return renderLineChart;\n    }\n}","import logo from './logo.svg';\nimport './App.css';\nimport World from './World';\nimport ProvStats from './ProvStats';\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport div, { Col, Container, Row } from 'react-bootstrap';\nimport NationalStats from './NationalStats';\nimport ProvGraph from './ProvGraph';\n\nclass App extends Component<{}, {lat: any, lon: any}> {\n    state = {lat: 0, lon: 0};\n\n    componentDidMount() {\n        \n        navigator.geolocation.getCurrentPosition((position) => {\n            this.setState({\n                lat: position.coords.latitude,\n                lon: position.coords.longitude\n            });\n            console.log(position);\n        });\n    }\n    componentWillUnmount() {\n        // fix Warning: Can't perform a React state update on an unmounted component\n        this.setState = (state,callback)=>{\n            return;\n        };\n    }\n    render(): any {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <link\n                        rel=\"stylesheet\"\n                        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                        integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                        crossOrigin=\"anonymous\"\n                    />\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <Container>\n                        <Row>\n                            <Col>\n                                <h6>World Deaths:</h6>\n                                <World />\n                            </Col>\n                            <Col>\n                                <ProvGraph latitude={this.state.lat} longitude={this.state.lon}/>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col><World /></Col>\n                            <Col><World /></Col>\n                        </Row>\n                        <Row>\n                            <Col><NationalStats latitude={this.state.lat} longitude={this.state.lon} /></Col>\n                            <Col><ProvStats latitude={this.state.lat} longitude={this.state.lon} /></Col>\n                        </Row>\n                    </Container>\n                </header>\n            </div>\n        )\n    }\n}\nrender(<App />, document.getElementById('root'));\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}